#!/usr/bin/env node

/**
 * Module dependencies.
 */
//加载依赖模块
var app = require('../app');
var debug = require('debug')('node_web:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
//定义启动端口
var port = normalizePort(process.env.PORT || '8001');//端口号
app.set('port', port);//设置端口号

/**
 * Create HTTP server.
 */
//创建http服务器
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
//启动服务器监听端口
server.listen(port);//监听端口号
server.on('error', onError);
server.on('listening', onListening);

//在默认情况下，同一个指定的事件，最多可以绑定10个事件处理函数.当绑定数超出时，启动nodejs时，会有相应的错误提示:
//(node) warning: possible EventEmitter memory leak detected. 11 reconnect listeners added. Use emitter.setMaxListeners() to increase limit.
//通过setMaxListeners()修改默认绑定的事件处理函数可以解决以上错误。把setMaxListeners()的参数修改为Infinity 或 0即可。
//server.setMaxListeners(Infinity);
/**
 * Normalize a port into a number, string, or false.
 */
//端口标准化
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
//error事件处理函数
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
//listening事件处理函数
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
